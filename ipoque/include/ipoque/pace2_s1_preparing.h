/********************************************************************************/
/**
 ** \file       pace2_s1_preparing.h
 ** \brief      PACE 2 preparing stage definitions.
 ** \copyright  ipoque GmbH
 **/
/********************************************************************************/

#ifndef PACE2_S1_PREPARING_H
#define PACE2_S1_PREPARING_H

/* Public Types *****************************************************************/

/**
 * @brief Supported frame type of stage 1 processing.
 */
typedef enum {
    PACE2_S1_L2 = 0,                    /*!< Generic layer 2 frame. */
    PACE2_S1_L3                         /*!< Generic layer 3 frame. */
} PACE2_s1_input_frame_type;

/**
 * @brief Return state of stage 1 processing function.
 */
typedef enum {
    PACE2_S1_SUCCESS = 0,               /*!< Processing was successful. */
    PACE2_S1_PARAM_MISSING,             /*!< Function parameter is missing. */
    PACE2_S1_UNSUPPORTED_FRAME,         /*!< The given frame type is not supported. */
    PACE2_S1_DEFRAG_WRONG_CHECKSUM,     /*!< Check of the checksum failed during defragmentation.
                                             The value will be returned only, if the @ref
                                             PACE2_s1_defrag_params::checksum "checksum handling" of the
                                             defragmentation is configured as
                                             IPOQUE_DEFRAG_CHECKSUM_DISCARD_WRONG_IP_CHECKSUM.  */
    PACE2_S1_DEFRAG_ONGOING,            /*!< Defragmentation is still running.
                                             No further processing should be done for this packet. */
    PACE2_S1_HEADER_CHECK_FAILED,       /*!< A length check of the header failed. */
    PACE2_S1_FAILURE                    /*!< Processing failed. */
} PACE2_s1_return_state;

/* Public Prototypes ************************************************************/

/**
 * @brief Performs stage 1 processing of a single packet frame.
 *
 * The function initializes the packet descriptor of a corresponding packet.
 * The packet framing will be generated by this function and if configured,
 * the IP defragmentation will be performed.
 *
 * @param[in]   pace2_module        Pointer to the PACE 2 module.
 * @param[in]   thread_ID           The ID of the thread currently processing.
 * @param[in]   timestamp           Packet timestamp value.
 * @param[in]   frame_data_ptr      Pointer to the frame payload data.
 * @param[in]   frame_data_len      Length of the frame payload data.
 * @param[in]   frame_type          Type of the frame.
 * @param[in,out] packet_descriptor Pointer to a packet descriptor structure, which will be used for data storage.
 * @param[in]   packet_user_data    Pointer to user defined packet data. This is optional.
 * @param[in]   packet_user_data_len Length of the user defined packet data.
 * @retval PACE2_S1_SUCCESS         @copydoc PACE2_s1_return_state::PACE2_S1_SUCCESS
 * @retval PACE2_S1_PARAM_MISSING   @copydoc PACE2_s1_return_state::PACE2_S1_PARAM_MISSING
 * @retval PACE2_S1_UNSUPPORTED_FRAME       @copydoc PACE2_s1_return_state::PACE2_S1_UNSUPPORTED_FRAME
 * @retval PACE2_S1_DEFRAG_WRONG_CHECKSUM   @copydoc PACE2_s1_return_state::PACE2_S1_DEFRAG_WRONG_CHECKSUM
 * @retval PACE2_S1_DEFRAG_ONGOING  @copydoc PACE2_s1_return_state::PACE2_S1_DEFRAG_ONGOING
 * @retval PACE2_S1_HEADER_CHECK_FAILED     @copydoc PACE2_s1_return_state::PACE2_S1_HEADER_CHECK_FAILED
 */
PACE2_s1_return_state pace2_s1_process_packet(PACE2_module * const pace2_module,
                                              int thread_ID,
                                              PACE2_timestamp timestamp,
                                              const void *frame_data_ptr,
                                              u16 frame_data_len,
                                              PACE2_s1_input_frame_type frame_type,
                                              PACE2_packet_descriptor *packet_descriptor,
                                              const void *packet_user_data,
                                              u16 packet_user_data_len);

#endif /* PACE2_S1_PREPARING_H */

/*********************************************************************************
 ** EOF
 ********************************************************************************/
