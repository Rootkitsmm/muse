/********************************************************************************/
/**
 ** \file       pace2_event_types.h
 ** \brief      Global PACE 2 event definitions.
 ** \copyright  ipoque GmbH
 **/
/********************************************************************************/

#ifndef PACE2_EVENT_TYPES_H
#define PACE2_EVENT_TYPES_H

/* Includes *********************************************************************/
#include "pace2_basic_def.h"
#include "pace2_pht.h"

/* Begin of Event Includes */
#include "event_types/http_events.h"
#include "event_types/citrix_events.h"
#include "event_types/dhcp_events.h"
#include "event_types/os_events.h"
#include "event_types/nat_events.h"
#include "event_types/sip_events.h"
#include "event_types/ssl_events.h"
#include "event_types/sit_events.h"
#include "event_types/csi_events.h"
#include "event_types/rtp_events.h"
#include "event_types/rtcp_events.h"
#include "event_types/tcp_events.h"
#include "event_types/classification_events.h"
#include "event_types/fastpath_events.h"
#include "event_types/app_events.h"
#include "event_types/diameter_events.h"
#include "event_types/dns_events.h"
#include "event_types/ftp_events.h"
#include "event_types/gtp_events.h"
#include "event_types/radius_events.h"
#include "event_types/icmpv6_events.h"
#include "event_types/pop3_events.h"
#include "event_types/imap_events.h"
#include "event_types/smtp_events.h"
#include "event_types/wsp_events.h"
#include "event_types/mail_events.h"
#include "event_types/pptp_events.h"
#include "event_types/jabber_events.h"
#include "event_types/generic_events.h"
#include "event_types/license_events.h"
#include "event_types/irc_events.h"
#include "event_types/cdd_events.h"
#include "event_types/h323_events.h"
#include "event_types/socks_events.h"
#include "event_types/hi5_events.h"
#include "event_types/dissector_metadata_events.h"
#include "event_types/telnet_events.h"
#include "event_types/mmse_events.h"
#include "event_types/l2tp_events.h"

/* End of Event Includes */

/* Event Groups *****************************************************************/

/**
 * @brief Event group definitions for events.
 */
typedef enum {
    PACE2_NO_GROUP = 0,                         /*!< A group for all events, which are not auto-generated and
                                                     not part of the group @ref PACE2_POLLING_PROTOCOL_META_DATA_GROUP */
    PACE2_START_GROUP,                          /*!< Group for subscriber and flow started events. */
    PACE2_DROP_GROUP,                           /*!< Group for subscriber and flow dropped events. */
    PACE2_CLASSIFICATION_RESULT_GROUP,          /*!< Group for classification result events. */
    PACE2_ENGINE_META_DATA_GROUP,               /*!< Group for engine meta data events like OS detection meta data. */
    PACE2_BASIC_PROTOCOL_META_DATA_GROUP,       /*!< Group for basic protocol meta data events. */
    PACE2_ADVANCED_PROTOCOL_META_DATA_GROUP,    /*!< Group for advanced protocol meta data events. */
    PACE2_CLASS_PROTOCOL_META_DATA_GROUP,       /*!< Group for class protocol meta data events. */
    PACE2_POLLING_PROTOCOL_META_DATA_GROUP,     /*!< Group for protocol meta data, which can be get by calling
                                                     the dedicated functions. The following events are assigned to
                                                     this group:
                                                     @arg @ref PACE2_BASIC_DHCP_EVENT
                                                     @arg @ref PACE2_TCP_EVENT
                                                     @arg @ref PACE2_BASIC_RTP_EVENT
                                                     @arg @ref PACE2_BASIC_RTCP_EVENT */
    PACE2_CUSTOM_DEFINED_EVENT_GROUP,           /*!< Group for custom defined events like @ref PACE2_CDD_EVENT .*/

    PACE2_NUMBER_OF_EVENT_GROUPS                /*!< Number of implemented event groups. */
} PACE2_event_groups;

/* Event Types ******************************************************************/

/**
 * @brief Global event type definitions.
 *
 * As a rule of thumb, events whose enum value starts with "PACE2_BASIC_" are only generated
 * during stage 3 processing. Events whose enum value starts with "PACE2_ADVANCED_" and "PACE2_CLASS_"
 * are only generated during stage 4 processing, whereas "PACE2_ADVANCED_" events are low level
 * events directly generated from the payload being decoded. "PACE2_CLASS_" events are
 * high level event generated by aggregating several low level events and by combining the
 * information, those low level events provide.
 * All other events may be thrown by any stage and are mostly status events.
 */
typedef enum {
    PACE2_NO_EVENT = 0,                         /*!< No real event. */
    PACE2_DETECTION_RESULT,                     /*!< PACE 1 detection results event. Deprecated, will be removed. */
    PACE2_FLOW_STARTED_EVENT,                   /*!< Flow entry start event. */
    PACE2_FLOW_DROPPED_EVENT,                   /*!< Flow entry drop event. */
    PACE2_SUBSCRIBER_STARTED_EVENT,             /*!< Subscriber entry start event. */
    PACE2_SUBSCRIBER_DROPPED_EVENT,             /*!< Subscriber entry drop event. */
    PACE2_BASIC_HTTP_REQUEST_EVENT,             /*!< Basic event for a HTTP request packet. */
    PACE2_BASIC_HTTP_RESPONSE_EVENT,            /*!< Basic event for a HTTP response packet. */
    PACE2_ADVANCED_HTTP_EVENT,                  /*!< Advanced HTTP event. */
    PACE2_CLASS_HTTP_EVENT,                     /*!< HTTP class event. */
    PACE2_BASIC_CITRIX_EVENT,                   /*!< Meta data event of the citrix protocol. */
    PACE2_BASIC_DHCP_EVENT,                     /*!< Basic event for a DHCP packet. */
    PACE2_ADVANCED_DHCP_EVENT,                  /*!< Advanced DHCP event. */
    PACE2_OS_EVENT,                             /*!< Meta data event of the OS detection. */
    PACE2_NAT_EVENT,                            /*!< Meta data event of the NAT detection. */
    PACE2_BASIC_SIP_EVENT,                      /*!< Basic event for a SIP packet. */
    PACE2_ADVANCED_SIP_EVENT,                   /*!< Advanced SIP event. */
    PACE2_CLASS_VOIP_EVENT,                     /*!< VOIP class event. */
    PACE2_BASIC_SSL_CLIENT_HELLO_EVENT,         /*!< Basic event for a SSL client hello packet. */
    PACE2_BASIC_SSL_SERVER_HELLO_EVENT,         /*!< Basic event for a SSL server hello packet. */
    PACE2_BASIC_SIT_EVENT,                      /*!< Meta data event for the SSL session ID tracker status. */
    PACE2_CSI_PACKET_DIR_EVENT,                 /*!< Meta data event for the packet direction, detected by the client-server indication. */
    PACE2_CSI_HOST_TYPE_EVENT,                  /*!< Meta data event for the host type, detected by the client-server indication. */
    PACE2_BASIC_RTP_EVENT,                      /*!< RTP performance report event. */
    PACE2_BASIC_RTCP_EVENT,                     /*!< RTCP report event. */
    PACE2_TCP_EVENT,                            /*!< TCP status information event. */
    PACE2_CLASSIFICATION_STATUS,                /*!< Classification status event. */
    PACE2_FASTPATH_EVENT,                       /*!< Fastpath status event. */
    PACE2_APP_EVENT,                            /*!< Application meta data event. */
    PACE2_ADVANCED_DIAMETER_EVENT,              /*!< Advanced Diameter event. */
    PACE2_ADVANCED_DNS_EVENT,                   /*!< Advanced DNS event. */
    PACE2_ADVANCED_FTP_EVENT,                   /*!< Advanced FTP event. */
    PACE2_ADVANCED_RADIUS_EVENT,                /*!< Advanced radius event. */
    PACE2_ADVANCED_ICMPV6_EVENT,                /*!< Advanced ICMPv6 event. */
    PACE2_ADVANCED_POP3_EVENT,                  /*!< Advanced POP3 event. */
    PACE2_ADVANCED_IMAP_EVENT,                  /*!< Advanced IMAP event. */
    PACE2_ADVANCED_SMTP_EVENT,                  /*!< Advanced SMTP event. */
    PACE2_ADVANCED_GTP_EVENT,                   /*!< Advanced GTP event. */
    PACE2_ADVANCED_WAP_WSP_EVENT,               /*!< Advanced WAP and WSP event. */
    PACE2_ADVANCED_UNENCRYPTED_JABBER_EVENT,    /*!< Advanced unencrypted jabber event. */
    PACE2_ADVANCED_PPTP_EVENT,                  /*!< Advanced PPTP event. */
    PACE2_CLASS_MAIL_EVENT,                     /*!< class Mail event. */
    PACE2_CLASSIFICATION_RESULT,                /*!< Classification result event. */
    PACE2_CDC_RESULT,                           /*!< Custom Defined Classification result event. */
    PACE2_LICENSE_EXCEEDED_EVENT,               /*!< License exceeded event. */
    PACE2_ADVANCED_IRC_EVENT,                   /*!< Advanced IRC event. */
    PACE2_FLOW_INFO_EVENT,                      /*!< Flow entry info event. */
    PACE2_FLOW_PROCESS_EVENT,                   /*!< Flow entry process event. Only available if the @ref PACE2_tracking_generic_params::enable_tracking_statistics
                                                     is enabled in the flow tracking part of the PACE2 config. */
    PACE2_SUBSCRIBER_PROCESS_EVENT,             /*!< Subscriber entry process event. Only available if the @ref PACE2_tracking_generic_params::enable_tracking_statistics
                                                     is enabled in the subscriber tracking part of the PACE2 config. */
    PACE2_CDD_EVENT,                            /*!< Custom defined decoder meta data event. */
    PACE2_ADVANCED_H323_EVENT,                  /*!< Advanced H323 event. */
    PACE2_ADVANCED_SOCKS_EVENT,                 /*!< Advanced SOCKS event. */
    PACE2_TCP_STARTED_EVENT,                    /*!< TCP start event. */
    PACE2_TCP_CLOSED_EVENT,                     /*!< TCP finished event. */
    PACE2_ADVANCED_HI5_EVENT,                   /*!< Advanced hi5 event. */
    PACE2_BASIC_SSL_DNS_ALT_NAMES_EVENT,        /*!< Basic event for a SSL DNS Alt Names. */
    PACE2_BASIC_DISSECTOR_METADATA_EVENT,       /*!< Basic dissector metadata event. */
    PACE2_ADVANCED_TELNET_EVENT,                /*!< Advanced Telnet event. */
    PACE2_ADVANCED_MMSE_EVENT,                  /*!< Advanced MMSE event. */
    PACE2_ADVANCED_L2TP_EVENT,                  /*!< Advanced L2TP event. */

    PACE2_NUMBER_OF_EVENTS                      /*!< Number of implemented event types. */
} PACE2_event_type;

/* Event Structures *************************************************************/

/**
 * @brief Global event structure definition.
 */
typedef union {
    /** structure containing just the header fields common to all events */
    struct {
        /** Global event type, see @ref PACE2_event_type for the possible values */
        PACE2_EVENT_COMMON_FIELDS;
    } header;

    PACE2_no_event no_event;                                        /*!< Placeholder structure. */
    PACE2DetectionResult detection_result;                          /*!< PACE 1 detection results event data. Deprecated, will be removed. */
    PACE2_flow_started flow_started;                                /*!< Flow started event data. */
    PACE2_flow_dropped flow_dropped;                                /*!< Flow dropped event data. */
    PACE2_subscriber_started subscriber_started;                    /*!< Subscriber started event data. */
    PACE2_subscriber_dropped subscriber_dropped;                    /*!< Subscriber dropped event data. */
    PACE2_basic_HTTP_request_event http_basic_request_meta_data;    /*!< Event data of a basic HTTP request event. */
    PACE2_basic_HTTP_response_event http_basic_response_meta_data;  /*!< Event data of a baisc HTTP response event. */
#ifndef PACE2_DISABLE_DECODER
    PACE2_advanced_HTTP_event http_advanced_meta_data;              /*!< Advanced HTTP event data. */
    PACE2_class_HTTP_event http_class_meta_data;                    /*!< HTTP class event data. */
#endif
    PACE2_citrix_event citrix_meta_data;                            /*!< Event data of a Citrix meta data event. */
    PACE2_basic_DHCP_event dhcp_basic_meta_data;                    /*!< Event data of a basic DHCP event. */
#ifndef PACE2_DISABLE_DECODER
    PACE2_advanced_DHCP_event dhcp_advanced_meta_data;              /*!< Advanced DHCP event data. */
#endif
    PACE2_OS_event os_meta_data;                                    /*!< Event data of a OS detection meta data event. */
    PACE2_NAT_event nat_meta_data;                                  /*!< Event data of a NAT detection meta data event. */
    PACE2_basic_SIP_event sip_basic_meta_data;                      /*!< Event data of a basic SIP event. */
#ifndef PACE2_DISABLE_DECODER
    PACE2_advanced_SIP_event sip_advanced_meta_data;                /*!< Advanced SIP event data. */
    PACE2_class_VOIP_event voip_class_meta_data;                    /*!< VOIP class event data. */
#endif
    PACE2_SSL_client_hello_event ssl_client_hello_meta_data;        /*!< Event data of a basic SSL client hello event. */
    PACE2_SSL_server_hello_event ssl_server_hello_meta_data;        /*!< Event data of a basic SSL server hello event. */
    PACE2_SIT_event sit_meta_data;                                  /*!< Event data of a SSL session ID tracker status event. */
    PACE2_csi_packet_dir_event csi_packet_dir_meta_data;            /*!< Event data of a packet direction event. */
    PACE2_csi_host_type_event csi_host_type_meta_data;              /*!< Event data of a host type event. */
    PACE2_RTP_event rtp_meta_data;                                  /*!< RTP performance report event data. */
    PACE2_RTCP_event rtcp_meta_data;                                /*!< RTCP report event data. */
    PACE2_TCP_event tcp_meta_data;                                  /*!< TCP status event data. */
    PACE2_classification_status_event classification_status_data;   /*!< Classification status event data. */
    PACE2_fastpath_event fastpath_meta_data;                        /*!< Fastpath status event data. */
    PACE2_app_event app_meta_data;                                  /*!< Application meta data event data. */

#ifndef PACE2_DISABLE_DECODER
    PACE2_advanced_Diameter_event diameter_advanced_meta_data;      /*!< Advanced Diameter event data. */
    PACE2_advanced_DNS_event dns_advanced_meta_data;                /*!< Advanced DNS event data. */
    PACE2_advanced_FTP_event ftp_advanced_meta_data;                /*!< Advanced FTP event data. */
    PACE2_advanced_radius_event radius_advanced_meta_data;          /*!< Advanced radius event data. */
    PACE2_advanced_icmpv6_event icmpv6_advanced_meta_data;          /*!< Advanced ICMPv6 event data. */
    PACE2_advanced_pop3_event pop3_advanced_meta_data;              /*!< Advanced POP3 event data. */
    PACE2_advanced_imap_event imap_advanced_meta_data;              /*!< Advanced IMAP event data. */
    PACE2_advanced_smtp_event smtp_advanced_meta_data;              /*!< Advanced SMTP event data. */
    PACE2_advanced_GTP_event gtp_advanced_meta_data;                /*!< Advanced GTP event data. */
    PACE2_advanced_wsp_event wsp_advanced_meta_data;                /*!< Advanced WAP and WSP event data. */
    PACE2_advanced_jabber_event jabber_advanced_meta_data;          /*!< Advanced unencrypted jabber event data. */
    PACE2_advanced_PPTP_event pptp_advanced_meta_data;              /*!< Advanced PPTP event data. */
    PACE2_class_MAIL_event mail_class_meta_data;                    /*!< Class Mail event data. */
#endif
    PACE2_classification_result_event classification_result_data;   /*!< Classification result event data. */
    PACE2_cdc_result_event cdc_data;                                /*!< Custom Defined Classification result event data. */
    PACE2_license_event license_event;                              /*!< License exceeded event data. */
#ifndef PACE2_DISABLE_DECODER
    PACE2_advanced_irc_event irc_advanced_meta_data;                /*!< Advanced IRC event data. */
#endif
    PACE2_flow_info flow_info;                                      /*!< Flow info event data. */
    PACE2_flow_process flow_process;                                /*!< Flow process event data. */
    PACE2_subscriber_process subscriber_process;                    /*!< Subscriber process event data. */
#ifndef PACE2_DISABLE_DECODER
    PACE2_cdd_event cdd_meta_data;                                  /*!< Custom defined decoder event data. */
    PACE2_advanced_h323_event h323_advanced_meta_data;              /*!< Advanced H323 event data. */
    PACE2_advanced_socks_event socks_advanced_meta_data;            /*!< Advanced SOCKS event data. */
#endif
    PACE2_TCP_started_event tcp_started_meta_data;                  /*!< TCP start event data. */
    PACE2_TCP_closed_event tcp_dropped_meta_data;                   /*!< TCP finished event data. */
#ifndef PACE2_DISABLE_DECODER
    PACE2_advanced_hi5_event hi5_advanced_meta_data;                /*!< Advanced Hi5 event data. */
#endif
    PACE2_SSL_dns_alt_names_event ssl_dns_alt_names_meta_data;      /*!< Event data of a basic SSL DNS Alt Names event. */
    PACE2_dissector_metadata_event dissector_metadata;              /*!< Dissector meta data event data. */
#ifndef PACE2_DISABLE_DECODER
    PACE2_advanced_telnet_event telnet_advanced_meta_data;          /*!< Advanced Telnet event data. */
    PACE2_advanced_mmse_event mmse_advanced_meta_data;              /*!< Advanced MMSE event data. */
    PACE2_advanced_l2tp_event l2tp_advanced_meta_data;              /*!< Advanced L2TP event data. */
#endif
} PACE2_event;

/* Public Prototypes ************************************************************/

/**
 * @brief Get the corresponding event group of a given event.
 *
 * @param[in]   event_type      Event type for which the group should be returned.
 * @param[out]  event_group     Group of the given event type.
 * @retval      PACE2_SUCCESS       @copydoc PACE2_return_state::PACE2_SUCCESS
 * @retval      PACE2_PARAM_MISSING @copydoc PACE2_return_state::PACE2_PARAM_MISSING
 * @retval      PACE2_FAILURE       Event type is unknown.
 */
PACE2_return_state pace2_get_group_of_event(PACE2_event_type const event_type,
                                            PACE2_event_groups * const event_group);

/**
 * @brief Get the corresponding events of a given event group.
 *
 * @param[in]   event_group     Event group for which the events should be returned.
 * @param[out]  event_types     Bitmask which indicates all events of the given group.
 * @retval      PACE2_SUCCESS       @copydoc PACE2_return_state::PACE2_SUCCESS
 * @retval      PACE2_PARAM_MISSING @copydoc PACE2_return_state::PACE2_PARAM_MISSING
 * @retval      PACE2_FAILURE       Event group is unknown.
 */
PACE2_return_state pace2_get_events_of_group(PACE2_event_groups const event_group,
                                             PACE2_bitmask * const event_types);

#endif /* PACE2_EVENT_TYPES_H */
