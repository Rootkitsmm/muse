/********************************************************************************/
/**
 ** \file       classification_events.h
 ** \brief      Generic classification event definitions.
 ** \copyright  ipoque GmbH
 **/
/********************************************************************************/

#ifndef CLASSIFICATION_EVENTS_H
#define CLASSIFICATION_EVENTS_H

/* Includes *********************************************************************/
#include "common_event_defs.h"
#include "../pace2_classification_results.h"

/* Event Groups *****************************************************************/
/**
 * @brief Public define for the assigned meta data group of the classification status event.
 */
#define PACE2_CLASSIFICATION_STATUS_EVENT_GROUP PACE2_NO_GROUP

/**
 * @brief Public define for the assigned meta data group of the detection result event.
 */
#define PACE2_DETECTION_RESULT_EVENT_GROUP PACE2_CLASSIFICATION_RESULT_GROUP

/**
 * @brief Public define for the assigned meta data group of the classification result event.
 */
#define PACE2_CLASSIFICATION_RESULT_EVENT_GROUP PACE2_CLASSIFICATION_RESULT_GROUP

/**
 * @brief Public define for the assigned meta data group of the CDC result event.
 */
#define PACE2_CDC_RESULT_EVENT_GROUP PACE2_CLASSIFICATION_RESULT_GROUP

/* Event Flags ******************************************************************/

/**
 * @brief Classification status flags.
 */
enum PACE2_class_status_flags {
    PACE2_CLASSIFICATION_API_VERSION = 0,       /**< API version flag. */
    PACE2_CLASSIFICATION_VERSION,               /**< Classification version flag. */
    PACE2_CLASSIFICATION_LICENSE,               /**< License information flag. */

    PACE2_NUMBER_OF_CLASS_STATUS_FLAGS          /**< Number of implemented flags. */
};

/* Event Structures *************************************************************/

/**
 * @brief Data structure of classification status events.
 */
typedef struct {
    /** Global event type, has to be @ref PACE2_CLASSIFICATION_STATUS for this structure. */
    PACE2_EVENT_COMMON_FIELDS;
    PACE2_bitmask meta_data_mask;               /**< Bitmask, which states the available detection status data */
    u32 api_version;                            /**< Variable of the @ref PACE2_CLASSIFICATION_API_VERSION flag. */
    ipoque_pace_version_t version;              /**< Data structure of the @ref PACE2_CLASSIFICATION_VERSION flag. */
    ipoque_pace_license_information_t license;  /**< Data structure of the @ref PACE2_CLASSIFICATION_LICENSE flag. */
} PACE2_classification_status_event;

/**
 * @deprecated This event will be removed, it will be replaced by @ref PACE2_classification_result_event.
 */
typedef struct {
    PACE2_EVENT_COMMON_FIELDS;
    const IPOQUE_PROTOCOL_BITMASK *excluded_protocol_bitmask;
    u16 effective_protocol;
    u16 effective_subprotocol;
    u16 real_protocol;
    u16 real_subprotocol;
    u32 application_id;
} PACE2DetectionResult;

/**
 * @brief Data structure of classification result events.
 */
typedef struct {
    /** Global event type, has to be @ref PACE2_CLASSIFICATION_RESULT for this structure. */
    PACE2_EVENT_COMMON_FIELDS;

    struct {
        PACE2_protocols_mask const * excluded_mask;         /**< Protocols that have been excluded so far.*/
        PACE2_protocol_stack stack;                         /**< The classified protocol stack. */
        PACE2_protocol_attribute_list attributes;           /**< The list of attributes of the classified protocol. */
    } protocol;                                             /**< Structure which contains all protocol data. */

    struct {
        PACE2_applications type;                            /**< The detected application, is valid if @ref classification_finished is set. */
        PACE2_boolean classification_finished;              /**< Represents the current state of the application classification.
                                                                 If @ref IPQ_FALSE, no application has been identified so far. */
        PACE2_application_attribute_list attributes;        /**< The list of attributes of the detected application. */
    } application;                                          /**< Structure which contains all application data. */

    u8 matched_by_seca:1;                                   /**< Indicates if the classification result is generated by the SECA engine. */
    u8 matched_by_deca:1;                                   /**< Indicates if the classification result is generated by the DECA engine. */
} PACE2_classification_result_event;

/**
 * @brief Data structure of custom classification result events.
 */
typedef struct {
    /** Global event type, has to be @ref PACE2_CDC_RESULT for this structure. */
    PACE2_EVENT_COMMON_FIELDS;

    u32 detected_cdc_id;
} PACE2_cdc_result_event;

#endif /* CLASSIFICATION_EVENTS_H */

/*********************************************************************************
 ** EOF
 ********************************************************************************/
